#!/usr/bin/env python3
"""
Teste simples dos endpoints da API sem depend√™ncias de banco
"""

import sys
import os
import asyncio
import json
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_api_imports():
    """Testa se os m√≥dulos da API podem ser importados"""
    print("üì¶ TESTANDO IMPORTS DOS M√ìDULOS DA API")
    print("=" * 50)
    
    results = []
    
    # Testar imports b√°sicos
    try:
        from app.core.config import settings
        print("‚úÖ Configura√ß√µes importadas com sucesso")
        results.append(True)
    except Exception as e:
        print(f"‚ùå Erro ao importar configura√ß√µes: {e}")
        results.append(False)
    
    # Testar imports dos endpoints
    try:
        from app.api.v1.endpoints import dashboard, signals, data
        print("‚úÖ Endpoints importados com sucesso")
        results.append(True)
    except Exception as e:
        print(f"‚ùå Erro ao importar endpoints: {e}")
        results.append(False)
    
    # Testar imports dos servi√ßos
    try:
        from app.services.robust_data_collector import RobustDataCollector
        print("‚úÖ Servi√ßos importados com sucesso")
        results.append(True)
    except Exception as e:
        print(f"‚ùå Erro ao importar servi√ßos: {e}")
        results.append(False)
    
    # Testar imports dos geradores de sinal
    try:
        from app.services.signal_generation.probabilistic_signal_generator import ProbabilisticSignalGenerator
        print("‚úÖ Geradores de sinal importados com sucesso")
        results.append(True)
    except Exception as e:
        print(f"‚ùå Erro ao importar geradores de sinal: {e}")
        results.append(False)
    
    return results

def test_endpoint_functions():
    """Testa se as fun√ß√µes dos endpoints est√£o definidas"""
    print("\nüîß TESTANDO FUN√á√ïES DOS ENDPOINTS")
    print("=" * 50)
    
    results = []
    
    try:
        from app.api.v1.endpoints import dashboard, signals, data
        
        # Testar fun√ß√µes do dashboard
        if hasattr(dashboard, 'get_dashboard_data'):
            print("‚úÖ get_dashboard_data definida")
            results.append(True)
        else:
            print("‚ùå get_dashboard_data n√£o definida")
            results.append(False)
        
        # Testar fun√ß√µes de sinais
        if hasattr(signals, 'generate_signals'):
            print("‚úÖ generate_signals definida")
            results.append(True)
        else:
            print("‚ùå generate_signals n√£o definida")
            results.append(False)
        
        if hasattr(signals, 'get_signals'):
            print("‚úÖ get_signals definida")
            results.append(True)
        else:
            print("‚ùå get_signals n√£o definida")
            results.append(False)
        
        # Testar fun√ß√µes de dados
        if hasattr(data, 'get_data_status'):
            print("‚úÖ get_data_status definida")
            results.append(True)
        else:
            print("‚ùå get_data_status n√£o definida")
            results.append(False)
        
        if hasattr(data, 'get_health_check'):
            print("‚úÖ get_health_check definida")
            results.append(True)
        else:
            print("‚ùå get_health_check n√£o definida")
            results.append(False)
        
    except Exception as e:
        print(f"‚ùå Erro ao testar fun√ß√µes: {e}")
        results.append(False)
    
    return results

def test_router_configuration():
    """Testa configura√ß√£o do router"""
    print("\nüõ£Ô∏è TESTANDO CONFIGURA√á√ÉO DO ROUTER")
    print("=" * 50)
    
    results = []
    
    try:
        from app.api.v1.router import api_router
        
        # Verificar se o router tem rotas
        if hasattr(api_router, 'routes') and len(api_router.routes) > 0:
            print(f"‚úÖ Router configurado com {len(api_router.routes)} rotas")
            results.append(True)
        else:
            print("‚ùå Router sem rotas configuradas")
            results.append(False)
        
        # Listar rotas dispon√≠veis
        print("üìã Rotas dispon√≠veis:")
        for route in api_router.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                methods = list(route.methods) if route.methods else ['GET']
                print(f"   - {methods[0]} {route.path}")
        
    except Exception as e:
        print(f"‚ùå Erro ao testar router: {e}")
        results.append(False)
    
    return results

def test_service_initialization():
    """Testa inicializa√ß√£o dos servi√ßos"""
    print("\n‚öôÔ∏è TESTANDO INICIALIZA√á√ÉO DOS SERVI√áOS")
    print("=" * 50)
    
    results = []
    
    try:
        # Testar inicializa√ß√£o do gerador de sinais
        from app.services.signal_generation.probabilistic_signal_generator import ProbabilisticSignalGenerator
        generator = ProbabilisticSignalGenerator()
        print("‚úÖ ProbabilisticSignalGenerator inicializado")
        results.append(True)
        
        # Testar inicializa√ß√£o das fontes de dados
        from app.services.data_sources.bacen_sgs_source import BacenSGSSource
        bacen_source = BacenSGSSource()
        print("‚úÖ BacenSGSSource inicializado")
        results.append(True)
        
        from app.services.data_sources.fred_source import FREDSource
        fred_source = FREDSource()
        print("‚úÖ FREDSource inicializado")
        results.append(True)
        
        from app.services.data_sources.yahoo_source import YahooSource
        yahoo_source = YahooSource()
        print("‚úÖ YahooSource inicializado")
        results.append(True)
        
    except Exception as e:
        print(f"‚ùå Erro ao inicializar servi√ßos: {e}")
        results.append(False)
    
    return results

def test_configuration_validation():
    """Testa valida√ß√£o das configura√ß√µes"""
    print("\n‚öôÔ∏è TESTANDO VALIDA√á√ÉO DAS CONFIGURA√á√ïES")
    print("=" * 50)
    
    results = []
    
    try:
        from app.core.config import settings
        
        # Testar configura√ß√µes cr√≠ticas
        if settings.HOST and settings.PORT:
            print(f"‚úÖ Host e porta configurados: {settings.HOST}:{settings.PORT}")
            results.append(True)
        else:
            print("‚ùå Host ou porta n√£o configurados")
            results.append(False)
        
        if settings.FRED_API_KEY:
            print(f"‚úÖ FRED API Key configurada")
            results.append(True)
        else:
            print("‚ö†Ô∏è FRED API Key n√£o configurada")
            results.append(False)
        
        if settings.BCB_SERIES and len(settings.BCB_SERIES) > 0:
            print(f"‚úÖ S√©ries BCB configuradas: {len(settings.BCB_SERIES)} s√©ries")
            results.append(True)
        else:
            print("‚ùå S√©ries BCB n√£o configuradas")
            results.append(False)
        
        if settings.OECD_COUNTRIES and len(settings.OECD_COUNTRIES) > 0:
            print(f"‚úÖ Pa√≠ses OECD configurados: {len(settings.OECD_COUNTRIES)} pa√≠ses")
            results.append(True)
        else:
            print("‚ùå Pa√≠ses OECD n√£o configurados")
            results.append(False)
        
    except Exception as e:
        print(f"‚ùå Erro ao validar configura√ß√µes: {e}")
        results.append(False)
    
    return results

def main():
    """Executa todos os testes simples da API"""
    print("üöÄ INICIANDO TESTES SIMPLES DA API")
    print("=" * 60)
    
    all_results = []
    
    # Testar imports
    import_results = test_api_imports()
    all_results.extend(import_results)
    
    # Testar fun√ß√µes dos endpoints
    function_results = test_endpoint_functions()
    all_results.extend(function_results)
    
    # Testar router
    router_results = test_router_configuration()
    all_results.extend(router_results)
    
    # Testar inicializa√ß√£o dos servi√ßos
    service_results = test_service_initialization()
    all_results.extend(service_results)
    
    # Testar configura√ß√µes
    config_results = test_configuration_validation()
    all_results.extend(config_results)
    
    # Resumo dos resultados
    print("\nüìä RESUMO DOS TESTES SIMPLES")
    print("=" * 50)
    
    passed = sum(all_results)
    total = len(all_results)
    
    print(f"‚úÖ Testes passaram: {passed}/{total}")
    print(f"‚ùå Testes falharam: {total - passed}/{total}")
    
    if passed >= total * 0.8:  # 80% de sucesso
        print("\nüéâ TESTES SIMPLES DA API PASSARAM!")
        return True
    else:
        print(f"\n‚ö†Ô∏è MUITOS TESTES SIMPLES DA API FALHARAM!")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå ERRO GERAL: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
