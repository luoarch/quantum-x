"""
Endpoints para An√°lise Cient√≠fica de Regimes Econ√¥micos
Rotas dedicadas para an√°lise robusta de regimes
"""

from fastapi import APIRouter, HTTPException, Depends, Query, BackgroundTasks
from typing import Dict, List, Optional, Any
import logging
from datetime import datetime, timedelta
import pandas as pd

from app.services.regime_analysis import (
    ScientificRegimeAnalyzer,
    AustrianCompatibleRegimeAnalyzer,
    RegimeAnalysisResult,
    RegimeType
)
from app.core.database import get_db
from app.services.robust_data_collector import RobustDataCollector

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/regime-analysis", tags=["Regime Analysis"])

# Inst√¢ncias globais dos analisadores
scientific_analyzer = ScientificRegimeAnalyzer()
austrian_analyzer = AustrianCompatibleRegimeAnalyzer()


@router.get("/health")
async def health_check():
    """Health check para an√°lise de regimes"""
    return {
        "status": "healthy",
        "service": "regime-analysis",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0"
    }


@router.post("/analyze", response_model=Dict[str, Any])
async def analyze_regimes(
    country: str = Query(..., description="Pa√≠s para an√°lise (BRA, USA, etc.)"),
    indicators: Optional[List[str]] = Query(None, description="Lista de indicadores espec√≠ficos"),
    analysis_type: str = Query("scientific", description="Tipo de an√°lise: scientific, austrian, hybrid"),
    max_regimes: int = Query(5, description="N√∫mero m√°ximo de regimes a testar"),
    confidence_threshold: float = Query(0.6, description="Limiar de confian√ßa para identifica√ß√£o"),
    db=Depends(get_db)
):
    """
    An√°lise cient√≠fica de regimes econ√¥micos
    
    Args:
        country: Pa√≠s para an√°lise
        indicators: Lista de indicadores espec√≠ficos (opcional)
        analysis_type: Tipo de an√°lise (scientific, austrian, hybrid)
        max_regimes: N√∫mero m√°ximo de regimes a testar
        confidence_threshold: Limiar de confian√ßa
        
    Returns:
        Resultado completo da an√°lise de regimes
    """
    try:
        logger.info(f"üöÄ Iniciando an√°lise de regimes para {country}")
        logger.info(f"üìä Tipo: {analysis_type}, Max regimes: {max_regimes}")
        
        # Coletar dados
        data_collector = RobustDataCollector(db)
        
        if indicators:
            # Coletar indicadores espec√≠ficos
            data = {}
            for indicator in indicators:
                try:
                    result = await data_collector.collect_series_with_priority(
                        series_name=indicator,
                        country=country,
                        months=60
                    )
                    if isinstance(result, dict) and 'data' in result:
                        data[indicator] = result['data']
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erro ao coletar {indicator}: {e}")
        else:
            # Coletar indicadores padr√£o
            data = await _collect_default_indicators(data_collector, country)
        
        if not data:
            raise HTTPException(
                status_code=400,
                detail="Nenhum dado dispon√≠vel para an√°lise"
            )
        
        # Converter para DataFrame
        analysis_data = _prepare_analysis_data(data)
        
        # Executar an√°lise baseada no tipo
        if analysis_type == "scientific":
            result = await scientific_analyzer.analyze_regimes(analysis_data, country)
        elif analysis_type == "austrian":
            result = await _run_austrian_analysis(analysis_data, country)
        elif analysis_type == "hybrid":
            result = await _run_hybrid_analysis(analysis_data, country)
        else:
            raise HTTPException(
                status_code=400,
                detail="Tipo de an√°lise inv√°lido. Use: scientific, austrian, hybrid"
            )
        
        # Converter resultado para dict
        result_dict = _convert_result_to_dict(result)
        
        logger.info(f"‚úÖ An√°lise conclu√≠da - Regime: {result_dict.get('current_regime', 'UNKNOWN')}")
        return result_dict
        
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise de regimes: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro na an√°lise de regimes: {str(e)}"
        )


@router.get("/forecast", response_model=List[Dict[str, Any]])
async def forecast_regimes(
    country: str = Query(..., description="Pa√≠s para previs√£o"),
    horizon: int = Query(6, description="Horizonte de previs√£o em meses"),
    analysis_type: str = Query("scientific", description="Tipo de an√°lise"),
    db=Depends(get_db)
):
    """
    Previs√£o de regimes econ√¥micos futuros
    
    Args:
        country: Pa√≠s para previs√£o
        horizon: Horizonte de previs√£o em meses
        analysis_type: Tipo de an√°lise
        
    Returns:
        Lista com previs√µes de regime
    """
    try:
        logger.info(f"üîÆ Gerando previs√£o de regimes para {country}")
        logger.info(f"üìÖ Horizonte: {horizon} meses")
        
        # Coletar dados hist√≥ricos
        data_collector = RobustDataCollector(db)
        data = await _collect_default_indicators(data_collector, country)
        
        if not data:
            raise HTTPException(
                status_code=400,
                detail="Dados insuficientes para previs√£o"
            )
        
        # Preparar dados
        analysis_data = _prepare_analysis_data(data)
        
        # Gerar previs√£o
        if analysis_type == "scientific":
            forecast = await scientific_analyzer.get_regime_forecast(analysis_data, horizon)
        else:
            # Para outros tipos, usar an√°lise cient√≠fica como base
            forecast = await scientific_analyzer.get_regime_forecast(analysis_data, horizon)
        
        logger.info(f"‚úÖ Previs√£o gerada: {len(forecast)} per√≠odos")
        return forecast
        
    except Exception as e:
        logger.error(f"‚ùå Erro na previs√£o: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro na previs√£o: {str(e)}"
        )


@router.get("/validation", response_model=Dict[str, Any])
async def validate_regime_model(
    country: str = Query(..., description="Pa√≠s para valida√ß√£o"),
    model_type: str = Query("markov_switching", description="Tipo de modelo"),
    db=Depends(get_db)
):
    """
    Valida√ß√£o estat√≠stica de modelo de regimes
    
    Args:
        country: Pa√≠s para valida√ß√£o
        model_type: Tipo de modelo
        
    Returns:
        Resultado da valida√ß√£o estat√≠stica
    """
    try:
        logger.info(f"üß™ Validando modelo de regimes para {country}")
        
        # Coletar dados
        data_collector = RobustDataCollector(db)
        data = await _collect_default_indicators(data_collector, country)
        
        if not data:
            raise HTTPException(
                status_code=400,
                detail="Dados insuficientes para valida√ß√£o"
            )
        
        # Preparar dados
        analysis_data = _prepare_analysis_data(data)
        
        # Ajustar modelo
        model_results = await scientific_analyzer.model.fit(analysis_data)
        
        if 'error' in model_results:
            raise HTTPException(
                status_code=400,
                detail=f"Erro no ajuste do modelo: {model_results['error']}"
            )
        
        # Validar modelo
        validation_result = await scientific_analyzer.validator.validate(
            model_results['model'], analysis_data
        )
        
        # Converter para dict
        validation_dict = {
            'is_valid': validation_result.is_valid,
            'aic': validation_result.aic,
            'bic': validation_result.bic,
            'log_likelihood': validation_result.log_likelihood,
            'convergence': validation_result.convergence,
            'linearity_test': validation_result.linearity_test,
            'regime_number_test': validation_result.regime_number_test,
            'out_of_sample_metrics': validation_result.out_of_sample_metrics,
            'timestamp': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ Valida√ß√£o conclu√≠da - V√°lido: {validation_result.is_valid}")
        return validation_dict
        
    except Exception as e:
        logger.error(f"‚ùå Erro na valida√ß√£o: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro na valida√ß√£o: {str(e)}"
        )


@router.get("/characteristics", response_model=Dict[str, Any])
async def get_regime_characteristics(
    country: str = Query(..., description="Pa√≠s para an√°lise"),
    db=Depends(get_db)
):
    """
    Obt√©m caracter√≠sticas detalhadas dos regimes identificados
    
    Args:
        country: Pa√≠s para an√°lise
        
    Returns:
        Caracter√≠sticas dos regimes
    """
    try:
        logger.info(f"üîç Analisando caracter√≠sticas dos regimes para {country}")
        
        # Coletar dados
        data_collector = RobustDataCollector(db)
        data = await _collect_default_indicators(data_collector, country)
        
        if not data:
            raise HTTPException(
                status_code=400,
                detail="Dados insuficientes para an√°lise"
            )
        
        # Preparar dados
        analysis_data = _prepare_analysis_data(data)
        
        # Ajustar modelo
        model_results = await scientific_analyzer.model.fit(analysis_data)
        
        if 'error' in model_results:
            raise HTTPException(
                status_code=400,
                detail=f"Erro no ajuste do modelo: {model_results['error']}"
            )
        
        # Caracterizar regimes
        characteristics = await scientific_analyzer.characterizer.characterize_regimes(
            model_results['model'], analysis_data
        )
        
        # Converter para dict
        characteristics_dict = {}
        for regime_type, char in characteristics.items():
            characteristics_dict[regime_type.value] = {
                'name': char.name,
                'duration_months': char.duration_months,
                'frequency': char.frequency,
                'mean_values': char.mean_values,
                'std_values': char.std_values,
                'confidence': char.confidence,
                'typical_periods': char.typical_periods
            }
        
        logger.info(f"‚úÖ Caracter√≠sticas obtidas: {len(characteristics)} regimes")
        return {
            'regime_characteristics': characteristics_dict,
            'total_regimes': len(characteristics),
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao obter caracter√≠sticas: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao obter caracter√≠sticas: {str(e)}"
        )


@router.get("/austrian-analysis", response_model=Dict[str, Any])
async def austrian_regime_analysis(
    country: str = Query(..., description="Pa√≠s para an√°lise"),
    db=Depends(get_db)
):
    """
    An√°lise de regimes compat√≠vel com escola austr√≠aca
    
    Args:
        country: Pa√≠s para an√°lise
        
    Returns:
        An√°lise baseada em teoria austr√≠aca
    """
    try:
        logger.info(f"üèõÔ∏è Executando an√°lise austr√≠aca para {country}")
        
        # Coletar dados
        data_collector = RobustDataCollector(db)
        data = await _collect_default_indicators(data_collector, country)
        
        if not data:
            raise HTTPException(
                status_code=400,
                detail="Dados insuficientes para an√°lise austr√≠aca"
            )
        
        # Preparar dados
        analysis_data = _prepare_analysis_data(data)
        
        # Executar an√°lises austr√≠acas
        credit_analysis = await austrian_analyzer.detect_credit_expansion(analysis_data)
        production_analysis = await austrian_analyzer.detect_production_distortions(analysis_data)
        malinvestment_analysis = await austrian_analyzer.detect_malinvestment_signals(analysis_data)
        monetary_analysis = await austrian_analyzer.analyze_monetary_policy_cycle(analysis_data)
        
        result = {
            'credit_expansion': credit_analysis,
            'production_distortions': production_analysis,
            'malinvestment_signals': malinvestment_analysis,
            'monetary_policy_cycle': monetary_analysis,
            'analysis_type': 'austrian',
            'country': country,
            'timestamp': datetime.now().isoformat()
        }
        
        logger.info(f"‚úÖ An√°lise austr√≠aca conclu√≠da para {country}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise austr√≠aca: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"Erro na an√°lise austr√≠aca: {str(e)}"
        )


async def _collect_default_indicators(data_collector: RobustDataCollector, country: str) -> Dict[str, pd.DataFrame]:
    """Coleta indicadores padr√£o para an√°lise"""
    try:
        indicators = {}
        
        # Indicadores b√°sicos
        basic_indicators = ['ipca', 'selic', 'pib', 'desemprego']
        
        for indicator in basic_indicators:
            try:
                result = await data_collector.collect_series_with_priority(
                    series_name=indicator,
                    country=country,
                    months=60
                )
                if isinstance(result, dict) and 'data' in result:
                    indicators[indicator] = result['data']
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao coletar {indicator}: {e}")
        
        return indicators
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao coletar indicadores padr√£o: {e}")
        return {}


def _prepare_analysis_data(data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
    """Prepara dados para an√°lise"""
    try:
        if not data:
            return pd.DataFrame()
        
        # Mesclar dados por data
        merged_data = None
        
        for name, df in data.items():
            if df.empty or 'value' not in df.columns:
                continue
            
            # Preparar dados
            indicator_data = df[['date', 'value']].copy()
            indicator_data = indicator_data.rename(columns={'value': name})
            indicator_data['date'] = pd.to_datetime(indicator_data['date'])
            indicator_data = indicator_data.dropna()
            
            if merged_data is None:
                merged_data = indicator_data
            else:
                merged_data = pd.merge(merged_data, indicator_data, on='date', how='outer')
        
        if merged_data is not None:
            merged_data = merged_data.sort_values('date').reset_index(drop=True)
        
        return merged_data if merged_data is not None else pd.DataFrame()
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao preparar dados: {e}")
        return pd.DataFrame()


def _convert_result_to_dict(result: RegimeAnalysisResult) -> Dict[str, Any]:
    """Converte resultado para dicion√°rio"""
    try:
        return {
            'current_regime': result.current_regime.value,
            'regime_probabilities': {k.value: v for k, v in result.regime_probabilities.items()},
            'regime_characteristics': {
                k.value: {
                    'name': v.name,
                    'duration_months': v.duration_months,
                    'frequency': v.frequency,
                    'mean_values': v.mean_values,
                    'std_values': v.std_values,
                    'confidence': v.confidence,
                    'typical_periods': v.typical_periods
                } for k, v in result.regime_characteristics.items()
            },
            'transition_matrix': {
                k.value: {kk.value: vv for kk, vv in v.items()}
                for k, v in result.transition_matrix.items()
            },
            'model_validation': {
                'is_valid': result.model_validation.is_valid,
                'aic': result.model_validation.aic,
                'bic': result.model_validation.bic,
                'log_likelihood': result.model_validation.log_likelihood,
                'convergence': result.model_validation.convergence,
                'linearity_test': result.model_validation.linearity_test,
                'regime_number_test': result.model_validation.regime_number_test,
                'out_of_sample_metrics': result.model_validation.out_of_sample_metrics
            },
            'confidence': result.confidence,
            'timestamp': result.timestamp,
            'data_quality': result.data_quality
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao converter resultado: {e}")
        return {'error': str(e)}


async def _run_austrian_analysis(data: pd.DataFrame, country: str) -> Dict[str, Any]:
    """Executa an√°lise austr√≠aca"""
    try:
        # Executar an√°lises austr√≠acas
        credit_analysis = await austrian_analyzer.detect_credit_expansion(data)
        production_analysis = await austrian_analyzer.detect_production_distortions(data)
        malinvestment_analysis = await austrian_analyzer.detect_malinvestment_signals(data)
        monetary_analysis = await austrian_analyzer.analyze_monetary_policy_cycle(data)
        
        return {
            'analysis_type': 'austrian',
            'country': country,
            'credit_expansion': credit_analysis,
            'production_distortions': production_analysis,
            'malinvestment_signals': malinvestment_analysis,
            'monetary_policy_cycle': monetary_analysis,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise austr√≠aca: {e}")
        return {'error': str(e)}


async def _run_hybrid_analysis(data: pd.DataFrame, country: str) -> Dict[str, Any]:
    """Executa an√°lise h√≠brida (cient√≠fica + austr√≠aca)"""
    try:
        # An√°lise cient√≠fica
        scientific_result = await scientific_analyzer.analyze_regimes(data, country)
        
        # An√°lise austr√≠aca
        austrian_result = await _run_austrian_analysis(data, country)
        
        return {
            'analysis_type': 'hybrid',
            'country': country,
            'scientific_analysis': _convert_result_to_dict(scientific_result),
            'austrian_analysis': austrian_result,
            'timestamp': datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro na an√°lise h√≠brida: {e}")
        return {'error': str(e)}
