"""
Agendador de tarefas para coleta autom√°tica de dados
"""

import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from sqlalchemy.orm import Session
import logging

from app.core.config import settings
from app.core.database import SessionLocal
from app.services.data_collector import DataCollector

logger = logging.getLogger(__name__)

# Inst√¢ncia global do scheduler
scheduler = AsyncIOScheduler()


async def collect_data_job():
    """Job para coleta autom√°tica de dados"""
    logger.info("üîÑ Iniciando coleta autom√°tica de dados")
    
    db = SessionLocal()
    try:
        collector = DataCollector()
        result = await collector.collect_all_data(db)
        
        if result.get('status') == 'completed':
            logger.info(f"‚úÖ Coleta autom√°tica conclu√≠da: {result.get('total_records')} registros")
        else:
            logger.error("‚ùå Erro na coleta autom√°tica")
            
    except Exception as e:
        logger.error(f"‚ùå Erro no job de coleta: {str(e)}")
    finally:
        db.close()


def start_scheduler():
    """Inicia o agendador"""
    if not scheduler.running:
        # Agendar coleta de dados a cada hora
        scheduler.add_job(
            collect_data_job,
            trigger=IntervalTrigger(seconds=settings.DATA_UPDATE_INTERVAL),
            id='data_collection',
            name='Coleta Autom√°tica de Dados',
            replace_existing=True
        )
        
        scheduler.start()
        logger.info("‚úÖ Agendador iniciado com sucesso")


def stop_scheduler():
    """Para o agendador"""
    if scheduler.running:
        scheduler.shutdown()
        logger.info("‚èπÔ∏è Agendador parado")
