"""
Backtester Hist√≥rico - Implementa backtesting rigoroso com dados hist√≥ricos reais
Simula trading com ativos reais baseado nos sinais CLI gerados
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import logging
from dataclasses import dataclass

from app.services.signal_generation import CLICalculator, SignalGenerator, MLOptimizer, PositionSizing
from app.services.robust_data_collector import RobustDataCollector
from app.core.database import get_db
from app.models.time_series import EconomicSeries, TradingSignal

logger = logging.getLogger(__name__)

@dataclass
class BacktestResult:
    """Resultado do backtesting"""
    total_return: float
    annualized_return: float
    sharpe_ratio: float
    max_drawdown: float
    win_rate: float
    total_trades: int
    profitable_trades: int
    avg_trade_return: float
    volatility: float
    calmar_ratio: float
    sortino_ratio: float
    start_date: datetime
    end_date: datetime
    initial_capital: float
    final_capital: float
    signals_generated: int
    buy_signals: int
    sell_signals: int
    hold_signals: int

class HistoricalBacktester:
    """
    Backtester hist√≥rico para validar estrat√©gia CLI com dados reais
    """
    
    def __init__(self, 
                 initial_capital: float = 100000.0,
                 transaction_cost: float = 0.001,  # 0.1% por transa√ß√£o
                 risk_free_rate: float = 0.05):    # 5% ao ano
        """
        Inicializa o backtester hist√≥rico
        
        Args:
            initial_capital: Capital inicial para simula√ß√£o
            transaction_cost: Custo de transa√ß√£o (0.1% = 0.001)
            risk_free_rate: Taxa livre de risco anual
        """
        self.initial_capital = initial_capital
        self.transaction_cost = transaction_cost
        self.risk_free_rate = risk_free_rate
        
        # Componentes do sistema de sinais
        self.cli_calculator = CLICalculator()
        self.signal_generator = SignalGenerator()
        self.ml_optimizer = MLOptimizer()
        self.position_sizing = PositionSizing()
        
        # Dados hist√≥ricos
        self.economic_data = {}
        self.cli_data = pd.DataFrame()
        self.signals_data = pd.DataFrame()
        self.positions_data = pd.DataFrame()
        
        # Resultados do backtest
        self.backtest_results = []
        self.portfolio_values = []
        self.trades = []
    
    async def run_historical_backtest(self, 
                                    start_date: str = "2010-01-01",
                                    end_date: str = "2025-09-23",
                                    rebalance_frequency: str = "monthly") -> BacktestResult:
        """
        Executa backtesting hist√≥rico completo
        
        Args:
            start_date: Data de in√≠cio do backtesting
            end_date: Data de fim do backtesting
            rebalance_frequency: Frequ√™ncia de rebalanceamento (monthly, weekly, daily)
            
        Returns:
            BacktestResult com m√©tricas de performance
        """
        try:
            logger.info(f"üöÄ Iniciando backtesting hist√≥rico: {start_date} a {end_date}")
            
            # 1. Coletar dados hist√≥ricos
            logger.info("üìä 1. Coletando dados hist√≥ricos...")
            await self._collect_historical_data(start_date, end_date)
            
            if not self.economic_data:
                raise ValueError("Falha na coleta de dados hist√≥ricos")
            
            # 2. Calcular CLI hist√≥rico
            logger.info("üßÆ 2. Calculando CLI hist√≥rico...")
            self.cli_data = self.cli_calculator.calculate_cli(self.economic_data)
            
            if self.cli_data.empty:
                raise ValueError("Falha no c√°lculo do CLI hist√≥rico")
            
            # 3. Gerar sinais hist√≥ricos
            logger.info("üìà 3. Gerando sinais hist√≥ricos...")
            self.signals_data = self.signal_generator.generate_signals(
                self.cli_data, self.economic_data
            )
            
            if self.signals_data.empty:
                raise ValueError("Falha na gera√ß√£o de sinais hist√≥ricos")
            
            # 4. Simular trading
            logger.info("üí∞ 4. Simulando trading...")
            await self._simulate_trading(rebalance_frequency)
            
            # 5. Calcular m√©tricas de performance
            logger.info("üìä 5. Calculando m√©tricas de performance...")
            result = self._calculate_performance_metrics(start_date, end_date)
            
            logger.info("‚úÖ Backtesting hist√≥rico conclu√≠do com sucesso!")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro no backtesting hist√≥rico: {e}")
            raise
    
    async def _collect_historical_data(self, start_date: str, end_date: str):
        """Coleta dados hist√≥ricos do per√≠odo especificado"""
        try:
            db = next(get_db())
            collector = RobustDataCollector(db)
            
            # Calcular n√∫mero de meses necess√°rios
            start_dt = datetime.strptime(start_date, "%Y-%m-%d")
            end_dt = datetime.strptime(end_date, "%Y-%m-%d")
            months = (end_dt.year - start_dt.year) * 12 + (end_dt.month - start_dt.month) + 1
            
            # Coletar dados
            collection_result = await collector.collect_all_series(months=months)
            self.economic_data = collection_result.get('economic', {})
            
            logger.info(f"‚úÖ Dados coletados: {len(self.economic_data)} s√©ries")
            for series_name, df in self.economic_data.items():
                logger.info(f"   - {series_name}: {len(df)} pontos")
            
        except Exception as e:
            logger.error(f"Erro na coleta de dados hist√≥ricos: {e}")
            raise
    
    async def _simulate_trading(self, rebalance_frequency: str):
        """Simula trading baseado nos sinais gerados"""
        try:
            # Preparar dados para simula√ß√£o
            portfolio_value = self.initial_capital
            cash = self.initial_capital
            position = 0.0  # Posi√ß√£o atual (0 = sem posi√ß√£o, 1 = 100% investido)
            
            # Criar DataFrame de resultados
            results = []
            
            # Filtrar sinais v√°lidos
            valid_signals = self.signals_data[
                self.signals_data['signal_type'].isin(['BUY', 'SELL'])
            ].copy()
            
            if valid_signals.empty:
                logger.warning("Nenhum sinal v√°lido para simula√ß√£o")
                return
            
            # Simular cada sinal
            for idx, signal_row in valid_signals.iterrows():
                signal_type = signal_row['signal_type']
                signal_strength = signal_row['signal_strength']
                signal_confidence = signal_row['signal_confidence']
                cli_value = signal_row['cli_normalized']
                
                # Calcular tamanho da posi√ß√£o baseado no sinal
                if signal_type == 'BUY':
                    target_position = min(1.0, signal_strength / 5.0)  # M√°ximo 100%
                elif signal_type == 'SELL':
                    target_position = max(0.0, 1.0 - (signal_strength / 5.0))  # M√≠nimo 0%
                else:
                    continue
                
                # Calcular mudan√ßa de posi√ß√£o
                position_change = target_position - position
                
                if abs(position_change) > 0.01:  # S√≥ trade se mudan√ßa > 1%
                    # Calcular custo da transa√ß√£o
                    trade_value = abs(position_change) * portfolio_value
                    transaction_cost = trade_value * self.transaction_cost
                    
                    # Atualizar posi√ß√£o
                    position = target_position
                    cash = cash - (position_change * portfolio_value) - transaction_cost
                    portfolio_value = cash + (position * portfolio_value)
                    
                    # Registrar trade
                    trade = {
                        'date': idx,
                        'signal_type': signal_type,
                        'signal_strength': signal_strength,
                        'signal_confidence': signal_confidence,
                        'cli_value': cli_value,
                        'position_before': position - position_change,
                        'position_after': position,
                        'position_change': position_change,
                        'trade_value': trade_value,
                        'transaction_cost': transaction_cost,
                        'portfolio_value': portfolio_value,
                        'cash': cash
                    }
                    
                    results.append(trade)
                    self.trades.append(trade)
                
                # Registrar valor do portfolio
                self.portfolio_values.append({
                    'date': idx,
                    'portfolio_value': portfolio_value,
                    'cash': cash,
                    'position': position,
                    'cli_value': cli_value
                })
            
            # Criar DataFrame de resultados
            self.backtest_results = pd.DataFrame(results)
            
            logger.info(f"‚úÖ Simula√ß√£o conclu√≠da: {len(self.trades)} trades executados")
            
        except Exception as e:
            logger.error(f"Erro na simula√ß√£o de trading: {e}")
            raise
    
    def _calculate_performance_metrics(self, start_date: str, end_date: str) -> BacktestResult:
        """Calcula m√©tricas de performance do backtesting"""
        try:
            if not self.portfolio_values:
                raise ValueError("Nenhum dado de portfolio para an√°lise")
            
            # Converter para DataFrame
            portfolio_df = pd.DataFrame(self.portfolio_values)
            portfolio_df['date'] = pd.to_datetime(portfolio_df['date'])
            portfolio_df = portfolio_df.set_index('date').sort_index()
            
            # Calcular retornos
            portfolio_df['returns'] = portfolio_df['portfolio_value'].pct_change().fillna(0)
            
            # M√©tricas b√°sicas
            initial_value = portfolio_df['portfolio_value'].iloc[0]
            final_value = portfolio_df['portfolio_value'].iloc[-1]
            total_return = (final_value - initial_value) / initial_value
            
            # Retorno anualizado
            years = (portfolio_df.index[-1] - portfolio_df.index[0]).days / 365.25
            annualized_return = (1 + total_return) ** (1 / years) - 1
            
            # Volatilidade
            volatility = portfolio_df['returns'].std() * np.sqrt(252)  # Anualizada
            
            # Sharpe Ratio
            excess_return = annualized_return - self.risk_free_rate
            sharpe_ratio = excess_return / volatility if volatility > 0 else 0
            
            # Maximum Drawdown
            cumulative = (1 + portfolio_df['returns']).cumprod()
            running_max = cumulative.expanding().max()
            drawdown = (cumulative - running_max) / running_max
            max_drawdown = drawdown.min()
            
            # Calmar Ratio
            calmar_ratio = annualized_return / abs(max_drawdown) if max_drawdown != 0 else 0
            
            # Sortino Ratio (usando apenas retornos negativos)
            negative_returns = portfolio_df['returns'][portfolio_df['returns'] < 0]
            downside_volatility = negative_returns.std() * np.sqrt(252) if len(negative_returns) > 0 else 0
            sortino_ratio = excess_return / downside_volatility if downside_volatility > 0 else 0
            
            # Estat√≠sticas de trades
            if self.trades:
                trades_df = pd.DataFrame(self.trades)
                profitable_trades = len(trades_df[trades_df['position_change'] > 0])
                total_trades = len(trades_df)
                win_rate = profitable_trades / total_trades if total_trades > 0 else 0
                avg_trade_return = trades_df['position_change'].mean()
            else:
                profitable_trades = 0
                total_trades = 0
                win_rate = 0
                avg_trade_return = 0
            
            # Estat√≠sticas de sinais
            signals_summary = self.signal_generator.get_signal_summary(self.signals_data)
            
            return BacktestResult(
                total_return=total_return,
                annualized_return=annualized_return,
                sharpe_ratio=sharpe_ratio,
                max_drawdown=max_drawdown,
                win_rate=win_rate,
                total_trades=total_trades,
                profitable_trades=profitable_trades,
                avg_trade_return=avg_trade_return,
                volatility=volatility,
                calmar_ratio=calmar_ratio,
                sortino_ratio=sortino_ratio,
                start_date=datetime.strptime(start_date, "%Y-%m-%d"),
                end_date=datetime.strptime(end_date, "%Y-%m-%d"),
                initial_capital=initial_value,
                final_capital=final_value,
                signals_generated=signals_summary['total_signals'],
                buy_signals=signals_summary['buy_signals'],
                sell_signals=signals_summary['sell_signals'],
                hold_signals=signals_summary['hold_signals']
            )
            
        except Exception as e:
            logger.error(f"Erro no c√°lculo de m√©tricas: {e}")
            raise
    
    def get_backtest_summary(self) -> Dict[str, Any]:
        """Retorna resumo do backtesting"""
        try:
            if not self.backtest_results:
                return {'error': 'Nenhum resultado de backtesting dispon√≠vel'}
            
            # Calcular m√©tricas b√°sicas
            portfolio_df = pd.DataFrame(self.portfolio_values)
            portfolio_df['date'] = pd.to_datetime(portfolio_df['date'])
            portfolio_df = portfolio_df.set_index('date').sort_index()
            
            initial_value = portfolio_df['portfolio_value'].iloc[0]
            final_value = portfolio_df['portfolio_value'].iloc[-1]
            total_return = (final_value - initial_value) / initial_value
            
            return {
                'period': f"{portfolio_df.index[0].strftime('%Y-%m-%d')} a {portfolio_df.index[-1].strftime('%Y-%m-%d')}",
                'initial_capital': initial_value,
                'final_capital': final_value,
                'total_return': f"{total_return:.2%}",
                'total_trades': len(self.trades),
                'signals_generated': len(self.signals_data),
                'cli_data_points': len(self.cli_data)
            }
            
        except Exception as e:
            logger.error(f"Erro ao gerar resumo: {e}")
            return {'error': str(e)}
    
    def export_results(self, filename: str = None) -> str:
        """Exporta resultados do backtesting para CSV"""
        try:
            if filename is None:
                filename = f"backtest_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            
            # Combinar dados de portfolio e trades
            portfolio_df = pd.DataFrame(self.portfolio_values)
            trades_df = pd.DataFrame(self.trades)
            
            # Salvar em arquivo
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                portfolio_df.to_excel(writer, sheet_name='Portfolio', index=False)
                trades_df.to_excel(writer, sheet_name='Trades', index=False)
                self.signals_data.to_excel(writer, sheet_name='Signals', index=True)
                self.cli_data.to_excel(writer, sheet_name='CLI', index=True)
            
            logger.info(f"‚úÖ Resultados exportados para: {filename}")
            return filename
            
        except Exception as e:
            logger.error(f"Erro na exporta√ß√£o: {e}")
            raise
