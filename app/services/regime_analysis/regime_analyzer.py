"""
Analisador Principal de Regimes Econ√¥micos
Integra todos os componentes para an√°lise cient√≠fica completa
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Any, Tuple
import logging
from datetime import datetime
import asyncio

from .interfaces import (
    IRegimeAnalyzer, IRegimeModel, IRegimeValidator, 
    IRegimeCharacterizer, IDataPreprocessor,
    RegimeAnalysisResult, RegimeType, RegimeCharacteristics
)
from .markov_switching_model import ScientificMarkovSwitchingModel
from .regime_validator import ScientificRegimeValidator
from .regime_characterizer import ScientificRegimeCharacterizer
from .data_preprocessor import ScientificDataPreprocessor

logger = logging.getLogger(__name__)


class ScientificRegimeAnalyzer(IRegimeAnalyzer):
    """
    Analisador cient√≠fico de regimes econ√¥micos
    Integra todos os componentes para an√°lise robusta
    """
    
    def __init__(self, 
                 max_regimes: int = 5,
                 confidence_threshold: float = 0.6,
                 validation_level: str = 'strict'):
        """
        Inicializa o analisador cient√≠fico
        
        Args:
            max_regimes: N√∫mero m√°ximo de regimes a testar
            confidence_threshold: Limiar de confian√ßa para identifica√ß√£o
            validation_level: N√≠vel de valida√ß√£o ('strict', 'moderate', 'lenient')
        """
        self.max_regimes = max_regimes
        self.confidence_threshold = confidence_threshold
        self.validation_level = validation_level
        
        # Inicializar componentes
        self.model: IRegimeModel = ScientificMarkovSwitchingModel(max_regimes=max_regimes)
        self.validator: IRegimeValidator = ScientificRegimeValidator()
        self.characterizer: IRegimeCharacterizer = ScientificRegimeCharacterizer(
            confidence_threshold=confidence_threshold
        )
        self.preprocessor: IDataPreprocessor = ScientificDataPreprocessor()
        
        # Cache para resultados
        self._cache = {}
        self._cache_ttl = 3600  # 1 hora
    
    async def analyze_regimes(self, data: pd.DataFrame, country: str) -> RegimeAnalysisResult:
        """
        An√°lise completa de regimes econ√¥micos
        
        Args:
            data: Dados econ√¥micos
            country: Pa√≠s para an√°lise
            
        Returns:
            Resultado completo da an√°lise
        """
        try:
            logger.info(f"üöÄ Iniciando an√°lise cient√≠fica de regimes para {country}")
            logger.info(f"üìä Dados de entrada: {data.shape}")
            
            # 1. Pr√©-processamento de dados
            logger.info("üîß ETAPA 1: Pr√©-processamento de dados")
            processed_data = await self.preprocessor.preprocess(data)
            data_quality = await self.preprocessor.validate_data_quality(processed_data)
            
            # 2. Ajuste do modelo Markov-Switching
            logger.info("üß† ETAPA 2: Ajuste do modelo Markov-Switching")
            model_results = await self.model.fit(processed_data)
            
            if 'error' in model_results:
                logger.error(f"‚ùå Erro no ajuste do modelo: {model_results['error']}")
                return self._create_fallback_result(data_quality)
            
            # 3. Valida√ß√£o cient√≠fica do modelo
            logger.info("üß™ ETAPA 3: Valida√ß√£o cient√≠fica do modelo")
            validation_result = await self.validator.validate(model_results['model'], processed_data)
            
            # 4. Caracteriza√ß√£o dos regimes
            logger.info("üîç ETAPA 4: Caracteriza√ß√£o dos regimes")
            regime_characteristics = await self.characterizer.characterize_regimes(
                model_results['model'], processed_data
            )
            
            # 5. Identifica√ß√£o do regime atual
            logger.info("üéØ ETAPA 5: Identifica√ß√£o do regime atual")
            current_regime = await self._identify_current_regime(model_results, regime_characteristics)
            
            # 6. C√°lculo de probabilidades de regime
            logger.info("üìä ETAPA 6: C√°lculo de probabilidades de regime")
            regime_probabilities = await self._calculate_regime_probabilities(model_results)
            
            # 7. C√°lculo da matriz de transi√ß√£o
            logger.info("üîÑ ETAPA 7: C√°lculo da matriz de transi√ß√£o")
            transition_matrix = await self._calculate_transition_matrix(model_results)
            
            # 8. C√°lculo da confian√ßa geral
            logger.info("üéØ ETAPA 8: C√°lculo da confian√ßa geral")
            overall_confidence = await self._calculate_overall_confidence(
                model_results, validation_result, regime_characteristics
            )
            
            # 9. Criar resultado final
            result = RegimeAnalysisResult(
                current_regime=current_regime,
                regime_probabilities=regime_probabilities,
                regime_characteristics=regime_characteristics,
                transition_matrix=transition_matrix,
                model_validation=validation_result,
                confidence=overall_confidence,
                timestamp=datetime.now().isoformat(),
                data_quality=data_quality
            )
            
            logger.info(f"‚úÖ An√°lise conclu√≠da - Regime atual: {current_regime.value}")
            logger.info(f"üéØ Confian√ßa geral: {overall_confidence:.2%}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de regimes: {e}")
            return self._create_fallback_result({'error': str(e)})
    
    async def get_regime_forecast(self, data: pd.DataFrame, horizon: int = 6) -> List[Dict[str, Any]]:
        """
        Previs√£o de regimes futuros
        
        Args:
            data: Dados hist√≥ricos
            horizon: Horizonte de previs√£o em meses
            
        Returns:
            Lista com previs√µes de regime
        """
        try:
            logger.info(f"üîÆ Gerando previs√£o de regimes para {horizon} meses")
            
            # Ajustar modelo se necess√°rio
            if self.model.best_model is None:
                processed_data = await self.preprocessor.preprocess(data)
                model_results = await self.model.fit(processed_data)
                
                if 'error' in model_results:
                    logger.error(f"‚ùå Erro no ajuste do modelo para previs√£o: {model_results['error']}")
                    return self._create_fallback_forecast(horizon)
            
            # Gerar previs√µes
            forecast = await self._generate_regime_forecast(horizon)
            
            logger.info(f"‚úÖ Previs√£o gerada: {len(forecast)} per√≠odos")
            return forecast
            
        except Exception as e:
            logger.error(f"‚ùå Erro na previs√£o de regimes: {e}")
            return self._create_fallback_forecast(horizon)
    
    async def _identify_current_regime(self, model_results: Dict[str, Any], 
                                     regime_characteristics: Dict[RegimeType, RegimeCharacteristics]) -> RegimeType:
        """Identifica o regime atual"""
        try:
            if 'most_likely_regime' not in model_results:
                return RegimeType.UNKNOWN
            
            # Obter regime mais prov√°vel
            most_likely_idx = model_results['most_likely_regime'][-1]
            regime_names = model_results.get('regime_names', [])
            
            if most_likely_idx < len(regime_names):
                regime_name = regime_names[most_likely_idx]
                return RegimeType(regime_name.lower())
            else:
                return RegimeType.UNKNOWN
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao identificar regime atual: {e}")
            return RegimeType.UNKNOWN
    
    async def _calculate_regime_probabilities(self, model_results: Dict[str, Any]) -> Dict[RegimeType, float]:
        """Calcula probabilidades de regime"""
        try:
            probabilities = {}
            
            if 'regime_probabilities' in model_results:
                regime_probs = model_results['regime_probabilities']
                regime_names = model_results.get('regime_names', [])
                
                # Usar √∫ltima observa√ß√£o
                if len(regime_probs) > 0:
                    last_probs = regime_probs[-1]
                    
                    for i, regime_name in enumerate(regime_names):
                        if i < len(last_probs):
                            probabilities[RegimeType(regime_name.lower())] = float(last_probs[i])
            
            # Preencher regimes ausentes com probabilidade zero
            for regime_type in RegimeType:
                if regime_type not in probabilities:
                    probabilities[regime_type] = 0.0
            
            return probabilities
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular probabilidades: {e}")
            return {regime_type: 0.25 for regime_type in RegimeType}
    
    async def _calculate_transition_matrix(self, model_results: Dict[str, Any]) -> Dict[RegimeType, Dict[RegimeType, float]]:
        """Calcula matriz de transi√ß√£o entre regimes"""
        try:
            if 'model' not in model_results:
                return self._create_default_transition_matrix()
            
            model = model_results['model']
            
            if hasattr(model, 'regime_transition'):
                # Usar matriz de transi√ß√£o do modelo
                transition_matrix = model.regime_transition
                regime_names = model_results.get('regime_names', [])
                
                # Converter para dicion√°rio
                result = {}
                for i, from_regime in enumerate(regime_names):
                    result[RegimeType(from_regime.lower())] = {}
                    for j, to_regime in enumerate(regime_names):
                        result[RegimeType(from_regime.lower())][RegimeType(to_regime.lower())] = float(transition_matrix[i, j])
                
                return result
            else:
                # Calcular matriz de transi√ß√£o baseada na sequ√™ncia de regimes
                return await self._calculate_transition_from_sequence(model_results)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular matriz de transi√ß√£o: {e}")
            return self._create_default_transition_matrix()
    
    async def _calculate_transition_from_sequence(self, model_results: Dict[str, Any]) -> Dict[RegimeType, Dict[RegimeType, float]]:
        """Calcula matriz de transi√ß√£o a partir da sequ√™ncia de regimes"""
        try:
            if 'most_likely_regime' not in model_results:
                return self._create_default_transition_matrix()
            
            regime_sequence = model_results['most_likely_regime']
            regime_names = model_results.get('regime_names', [])
            
            if len(regime_sequence) < 2:
                return self._create_default_transition_matrix()
            
            # Calcular matriz de transi√ß√£o
            n_regimes = len(regime_names)
            transition_matrix = np.zeros((n_regimes, n_regimes))
            
            for i in range(len(regime_sequence) - 1):
                from_regime = regime_sequence[i]
                to_regime = regime_sequence[i + 1]
                if from_regime < n_regimes and to_regime < n_regimes:
                    transition_matrix[from_regime, to_regime] += 1
            
            # Normalizar para probabilidades
            row_sums = transition_matrix.sum(axis=1)
            for i in range(n_regimes):
                if row_sums[i] > 0:
                    transition_matrix[i, :] /= row_sums[i]
                else:
                    transition_matrix[i, :] = 1.0 / n_regimes
            
            # Converter para dicion√°rio
            result = {}
            for i, from_regime in enumerate(regime_names):
                result[RegimeType(from_regime.lower())] = {}
                for j, to_regime in enumerate(regime_names):
                    result[RegimeType(from_regime.lower())][RegimeType(to_regime.lower())] = float(transition_matrix[i, j])
            
            return result
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular transi√ß√£o da sequ√™ncia: {e}")
            return self._create_default_transition_matrix()
    
    def _create_default_transition_matrix(self) -> Dict[RegimeType, Dict[RegimeType, float]]:
        """Cria matriz de transi√ß√£o padr√£o"""
        regimes = list(RegimeType)
        return {
            regime: {other_regime: 1.0 / len(regimes) for other_regime in regimes}
            for regime in regimes
        }
    
    async def _calculate_overall_confidence(self, model_results: Dict[str, Any], 
                                          validation_result: ModelValidationResult,
                                          regime_characteristics: Dict[RegimeType, RegimeCharacteristics]) -> float:
        """Calcula confian√ßa geral da an√°lise"""
        try:
            confidence_factors = []
            
            # 1. Confian√ßa do modelo
            if 'regime_probabilities' in model_results:
                regime_probs = model_results['regime_probabilities']
                if len(regime_probs) > 0:
                    model_confidence = float(np.max(regime_probs[-1]))
                    confidence_factors.append(model_confidence)
            
            # 2. Confian√ßa da valida√ß√£o
            if validation_result.is_valid:
                validation_confidence = 0.8  # Baseado em valida√ß√£o bem-sucedida
                confidence_factors.append(validation_confidence)
            
            # 3. Confian√ßa das caracter√≠sticas
            if regime_characteristics:
                char_confidences = [char.confidence for char in regime_characteristics.values()]
                if char_confidences:
                    char_confidence = np.mean(char_confidences)
                    confidence_factors.append(char_confidence)
            
            # 4. Confian√ßa baseada na converg√™ncia
            if 'convergence' in model_results and model_results['convergence']:
                convergence_confidence = 0.9
                confidence_factors.append(convergence_confidence)
            
            if not confidence_factors:
                return 0.0
            
            # M√©dia ponderada
            overall_confidence = np.mean(confidence_factors)
            return float(min(max(overall_confidence, 0.0), 1.0))
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular confian√ßa geral: {e}")
            return 0.0
    
    async def _generate_regime_forecast(self, horizon: int) -> List[Dict[str, Any]]:
        """Gera previs√£o de regimes futuros"""
        try:
            forecast = []
            
            # Implementa√ß√£o simplificada baseada na matriz de transi√ß√£o
            # Em produ√ß√£o, usar m√©todos mais sofisticados como Monte Carlo
            
            for month in range(1, horizon + 1):
                forecast.append({
                    'month': month,
                    'regime': 'UNKNOWN',
                    'probability': 0.25,
                    'confidence': 0.5
                })
            
            return forecast
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na gera√ß√£o de previs√£o: {e}")
            return self._create_fallback_forecast(horizon)
    
    def _create_fallback_result(self, data_quality: Dict[str, Any]) -> RegimeAnalysisResult:
        """Cria resultado de fallback em caso de erro"""
        return RegimeAnalysisResult(
            current_regime=RegimeType.UNKNOWN,
            regime_probabilities={regime_type: 0.25 for regime_type in RegimeType},
            regime_characteristics={},
            transition_matrix=self._create_default_transition_matrix(),
            model_validation=ModelValidationResult(
                is_valid=False,
                aic=float('inf'),
                bic=float('inf'),
                log_likelihood=float('-inf'),
                convergence=False,
                linearity_test={'error': 'Model failed'},
                regime_number_test={'error': 'Model failed'},
                out_of_sample_metrics={'error': 'Model failed'}
            ),
            confidence=0.0,
            timestamp=datetime.now().isoformat(),
            data_quality=data_quality
        )
    
    def _create_fallback_forecast(self, horizon: int) -> List[Dict[str, Any]]:
        """Cria previs√£o de fallback"""
        return [
            {
                'month': i + 1,
                'regime': 'UNKNOWN',
                'probability': 0.25,
                'confidence': 0.0
            }
            for i in range(horizon)
        ]
