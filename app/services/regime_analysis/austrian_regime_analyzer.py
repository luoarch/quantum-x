"""
Analisador de Regimes Compat√≠vel com Escola Austr√≠aca
Implementa an√°lise baseada em teoria austr√≠aca de ciclos econ√¥micos
"""

import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Any, Tuple
import logging
from datetime import datetime, timedelta

from .interfaces import IAustrianRegimeAnalyzer

logger = logging.getLogger(__name__)


class AustrianCompatibleRegimeAnalyzer(IAustrianRegimeAnalyzer):
    """
    Analisador de regimes compat√≠vel com escola austr√≠aca
    Foca em indicadores monet√°rios e distor√ß√µes artificiais
    """
    
    def __init__(self, 
                 credit_expansion_threshold: float = 0.1,
                 yield_curve_threshold: float = 0.5,
                 malinvestment_threshold: float = 0.15):
        """
        Inicializa o analisador austr√≠aco
        
        Args:
            credit_expansion_threshold: Limiar para expans√£o artificial de cr√©dito
            yield_curve_threshold: Limiar para distor√ß√£o da curva de juros
            malinvestment_threshold: Limiar para m√°-aloca√ß√£o de capital
        """
        self.credit_expansion_threshold = credit_expansion_threshold
        self.yield_curve_threshold = yield_curve_threshold
        self.malinvestment_threshold = malinvestment_threshold
        
        # Indicadores espec√≠ficos da escola austr√≠aca
        self.austrian_indicators = [
            'credit_expansion_rate',
            'yield_curve_slope', 
            'money_supply_growth',
            'real_interest_rate',
            'malinvestment_proxy',
            'capital_structure_distortion',
            'monetary_policy_aggressiveness'
        ]
    
    async def detect_credit_expansion(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Detecta expans√£o artificial de cr√©dito
        
        Args:
            data: Dados econ√¥micos
            
        Returns:
            An√°lise de expans√£o de cr√©dito
        """
        try:
            logger.info("üí∞ Analisando expans√£o artificial de cr√©dito")
            
            # Procurar indicadores de cr√©dito
            credit_indicators = self._find_credit_indicators(data)
            
            if not credit_indicators:
                logger.warning("‚ö†Ô∏è Nenhum indicador de cr√©dito encontrado")
                return self._create_fallback_credit_analysis()
            
            # Analisar expans√£o de cr√©dito
            credit_analysis = {}
            
            for indicator, series in credit_indicators.items():
                if len(series) < 2:
                    continue
                
                # Calcular taxa de crescimento
                growth_rate = self._calculate_growth_rate(series)
                
                # Detectar acelera√ß√£o
                acceleration = self._detect_acceleration(series)
                
                # Identificar padr√µes de expans√£o
                expansion_patterns = self._identify_expansion_patterns(series)
                
                credit_analysis[indicator] = {
                    'growth_rate': growth_rate,
                    'acceleration': acceleration,
                    'expansion_patterns': expansion_patterns,
                    'is_artificial': self._is_artificial_expansion(growth_rate, acceleration),
                    'risk_level': self._assess_credit_risk(growth_rate, acceleration)
                }
            
            # An√°lise agregada
            overall_analysis = self._aggregate_credit_analysis(credit_analysis)
            
            logger.info(f"‚úÖ An√°lise de cr√©dito conclu√≠da - Risco: {overall_analysis['overall_risk']}")
            return overall_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de cr√©dito: {e}")
            return {'error': str(e)}
    
    async def detect_production_distortions(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Detecta distor√ß√µes na estrutura de produ√ß√£o
        
        Args:
            data: Dados econ√¥micos
            
        Returns:
            An√°lise de distor√ß√µes produtivas
        """
        try:
            logger.info("üè≠ Analisando distor√ß√µes na estrutura de produ√ß√£o")
            
            # Procurar indicadores de produ√ß√£o
            production_indicators = self._find_production_indicators(data)
            
            if not production_indicators:
                logger.warning("‚ö†Ô∏è Nenhum indicador de produ√ß√£o encontrado")
                return self._create_fallback_production_analysis()
            
            # Analisar distor√ß√µes
            distortion_analysis = {}
            
            for indicator, series in production_indicators.items():
                if len(series) < 2:
                    continue
                
                # Calcular distor√ß√µes relativas
                relative_distortions = self._calculate_relative_distortions(series)
                
                # Detectar desalinhamentos setoriais
                sectoral_misalignments = self._detect_sectoral_misalignments(series)
                
                # Identificar padr√µes de m√°-aloca√ß√£o
                misallocation_patterns = self._identify_misallocation_patterns(series)
                
                distortion_analysis[indicator] = {
                    'relative_distortions': relative_distortions,
                    'sectoral_misalignments': sectoral_misalignments,
                    'misallocation_patterns': misallocation_patterns,
                    'distortion_severity': self._assess_distortion_severity(relative_distortions),
                    'recovery_time': self._estimate_recovery_time(relative_distortions)
                }
            
            # An√°lise agregada
            overall_analysis = self._aggregate_production_analysis(distortion_analysis)
            
            logger.info(f"‚úÖ An√°lise de produ√ß√£o conclu√≠da - Severidade: {overall_analysis['overall_severity']}")
            return overall_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de produ√ß√£o: {e}")
            return {'error': str(e)}
    
    async def detect_malinvestment_signals(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Detecta sinais de m√°-aloca√ß√£o de capital
        
        Args:
            data: Dados econ√¥micos
            
        Returns:
            An√°lise de m√°-aloca√ß√£o de capital
        """
        try:
            logger.info("üí∏ Analisando sinais de m√°-aloca√ß√£o de capital")
            
            # Procurar indicadores de investimento
            investment_indicators = self._find_investment_indicators(data)
            
            if not investment_indicators:
                logger.warning("‚ö†Ô∏è Nenhum indicador de investimento encontrado")
                return self._create_fallback_investment_analysis()
            
            # Analisar m√°-aloca√ß√£o
            malinvestment_analysis = {}
            
            for indicator, series in investment_indicators.items():
                if len(series) < 2:
                    continue
                
                # Calcular efici√™ncia do investimento
                investment_efficiency = self._calculate_investment_efficiency(series)
                
                # Detectar bolhas de investimento
                investment_bubbles = self._detect_investment_bubbles(series)
                
                # Identificar setores problem√°ticos
                problematic_sectors = self._identify_problematic_sectors(series)
                
                malinvestment_analysis[indicator] = {
                    'investment_efficiency': investment_efficiency,
                    'investment_bubbles': investment_bubbles,
                    'problematic_sectors': problematic_sectors,
                    'malinvestment_score': self._calculate_malinvestment_score(investment_efficiency, investment_bubbles),
                    'correction_risk': self._assess_correction_risk(investment_efficiency, investment_bubbles)
                }
            
            # An√°lise agregada
            overall_analysis = self._aggregate_malinvestment_analysis(malinvestment_analysis)
            
            logger.info(f"‚úÖ An√°lise de m√°-aloca√ß√£o conclu√≠da - Score: {overall_analysis['overall_score']}")
            return overall_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise de m√°-aloca√ß√£o: {e}")
            return {'error': str(e)}
    
    async def analyze_monetary_policy_cycle(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Analisa ciclo de pol√≠tica monet√°ria
        
        Args:
            data: Dados econ√¥micos
            
        Returns:
            An√°lise do ciclo monet√°rio
        """
        try:
            logger.info("üè¶ Analisando ciclo de pol√≠tica monet√°ria")
            
            # Procurar indicadores monet√°rios
            monetary_indicators = self._find_monetary_indicators(data)
            
            if not monetary_indicators:
                logger.warning("‚ö†Ô∏è Nenhum indicador monet√°rio encontrado")
                return self._create_fallback_monetary_analysis()
            
            # Analisar ciclo monet√°rio
            cycle_analysis = {}
            
            for indicator, series in monetary_indicators.items():
                if len(series) < 2:
                    continue
                
                # Identificar fases do ciclo
                cycle_phases = self._identify_cycle_phases(series)
                
                # Detectar interven√ß√µes
                interventions = self._detect_monetary_interventions(series)
                
                # Calcular distor√ß√µes monet√°rias
                monetary_distortions = self._calculate_monetary_distortions(series)
                
                cycle_analysis[indicator] = {
                    'cycle_phases': cycle_phases,
                    'interventions': interventions,
                    'monetary_distortions': monetary_distortions,
                    'policy_aggressiveness': self._assess_policy_aggressiveness(interventions),
                    'distortion_impact': self._assess_distortion_impact(monetary_distortions)
                }
            
            # An√°lise agregada
            overall_analysis = self._aggregate_monetary_analysis(cycle_analysis)
            
            logger.info(f"‚úÖ An√°lise monet√°ria conclu√≠da - Agressividade: {overall_analysis['overall_aggressiveness']}")
            return overall_analysis
            
        except Exception as e:
            logger.error(f"‚ùå Erro na an√°lise monet√°ria: {e}")
            return {'error': str(e)}
    
    def _find_credit_indicators(self, data: pd.DataFrame) -> Dict[str, pd.Series]:
        """Encontra indicadores de cr√©dito nos dados"""
        credit_indicators = {}
        
        # Procurar por colunas relacionadas a cr√©dito
        credit_keywords = ['credit', 'loan', 'debt', 'lending', 'credito', 'emprestimo']
        
        for column in data.columns:
            if any(keyword in column.lower() for keyword in credit_keywords):
                if pd.api.types.is_numeric_dtype(data[column]):
                    credit_indicators[column] = data[column].dropna()
        
        return credit_indicators
    
    def _find_production_indicators(self, data: pd.DataFrame) -> Dict[str, pd.Series]:
        """Encontra indicadores de produ√ß√£o nos dados"""
        production_indicators = {}
        
        # Procurar por colunas relacionadas a produ√ß√£o
        production_keywords = ['production', 'industrial', 'manufacturing', 'prod', 'industria']
        
        for column in data.columns:
            if any(keyword in column.lower() for keyword in production_keywords):
                if pd.api.types.is_numeric_dtype(data[column]):
                    production_indicators[column] = data[column].dropna()
        
        return production_indicators
    
    def _find_investment_indicators(self, data: pd.DataFrame) -> Dict[str, pd.Series]:
        """Encontra indicadores de investimento nos dados"""
        investment_indicators = {}
        
        # Procurar por colunas relacionadas a investimento
        investment_keywords = ['investment', 'capital', 'investimento', 'capital']
        
        for column in data.columns:
            if any(keyword in column.lower() for keyword in investment_keywords):
                if pd.api.types.is_numeric_dtype(data[column]):
                    investment_indicators[column] = data[column].dropna()
        
        return investment_indicators
    
    def _find_monetary_indicators(self, data: pd.DataFrame) -> Dict[str, pd.Series]:
        """Encontra indicadores monet√°rios nos dados"""
        monetary_indicators = {}
        
        # Procurar por colunas relacionadas a pol√≠tica monet√°ria
        monetary_keywords = ['interest', 'rate', 'selic', 'juros', 'monetary', 'money', 'supply']
        
        for column in data.columns:
            if any(keyword in column.lower() for keyword in monetary_keywords):
                if pd.api.types.is_numeric_dtype(data[column]):
                    monetary_indicators[column] = data[column].dropna()
        
        return monetary_indicators
    
    def _calculate_growth_rate(self, series: pd.Series) -> float:
        """Calcula taxa de crescimento"""
        try:
            if len(series) < 2:
                return 0.0
            
            # Calcular crescimento percentual
            growth_rates = series.pct_change().dropna()
            return float(growth_rates.mean())
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao calcular taxa de crescimento: {e}")
            return 0.0
    
    def _detect_acceleration(self, series: pd.Series) -> float:
        """Detecta acelera√ß√£o na s√©rie"""
        try:
            if len(series) < 3:
                return 0.0
            
            # Calcular segunda derivada (acelera√ß√£o)
            first_derivative = series.diff()
            second_derivative = first_derivative.diff()
            
            return float(second_derivative.mean())
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao detectar acelera√ß√£o: {e}")
            return 0.0
    
    def _identify_expansion_patterns(self, series: pd.Series) -> List[str]:
        """Identifica padr√µes de expans√£o"""
        patterns = []
        
        try:
            # Padr√£o de crescimento exponencial
            if self._is_exponential_growth(series):
                patterns.append('exponential_growth')
            
            # Padr√£o de acelera√ß√£o
            if self._is_accelerating(series):
                patterns.append('accelerating')
            
            # Padr√£o de volatilidade crescente
            if self._is_increasing_volatility(series):
                patterns.append('increasing_volatility')
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao identificar padr√µes: {e}")
        
        return patterns
    
    def _is_exponential_growth(self, series: pd.Series) -> bool:
        """Verifica se h√° crescimento exponencial"""
        try:
            if len(series) < 3:
                return False
            
            # Calcular crescimento percentual
            growth_rates = series.pct_change().dropna()
            
            # Verificar se crescimento est√° acelerando
            return growth_rates.mean() > 0.05 and growth_rates.std() < growth_rates.mean()
            
        except Exception:
            return False
    
    def _is_accelerating(self, series: pd.Series) -> bool:
        """Verifica se h√° acelera√ß√£o"""
        try:
            if len(series) < 3:
                return False
            
            # Calcular acelera√ß√£o
            first_derivative = series.diff()
            second_derivative = first_derivative.diff()
            
            return second_derivative.mean() > 0
            
        except Exception:
            return False
    
    def _is_increasing_volatility(self, series: pd.Series) -> bool:
        """Verifica se h√° aumento na volatilidade"""
        try:
            if len(series) < 10:
                return False
            
            # Dividir s√©rie em duas metades
            mid_point = len(series) // 2
            first_half = series[:mid_point]
            second_half = series[mid_point:]
            
            # Comparar volatilidade
            vol_first = first_half.std()
            vol_second = second_half.std()
            
            return vol_second > vol_first * 1.2
            
        except Exception:
            return False
    
    def _is_artificial_expansion(self, growth_rate: float, acceleration: float) -> bool:
        """Determina se expans√£o √© artificial"""
        return (growth_rate > self.credit_expansion_threshold and 
                acceleration > 0 and 
                growth_rate > 0.05)  # Crescimento > 5% ao per√≠odo
    
    def _assess_credit_risk(self, growth_rate: float, acceleration: float) -> str:
        """Avalia risco de cr√©dito"""
        if growth_rate > 0.15 or acceleration > 0.1:
            return 'high'
        elif growth_rate > 0.08 or acceleration > 0.05:
            return 'medium'
        else:
            return 'low'
    
    def _aggregate_credit_analysis(self, credit_analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Agrega an√°lise de cr√©dito"""
        try:
            if not credit_analysis:
                return self._create_fallback_credit_analysis()
            
            # Calcular m√©dias
            avg_growth_rate = np.mean([analysis['growth_rate'] for analysis in credit_analysis.values()])
            avg_acceleration = np.mean([analysis['acceleration'] for analysis in credit_analysis.values()])
            
            # Contar padr√µes
            all_patterns = []
            for analysis in credit_analysis.values():
                all_patterns.extend(analysis['expansion_patterns'])
            
            pattern_counts = {pattern: all_patterns.count(pattern) for pattern in set(all_patterns)}
            
            # Determinar risco geral
            risk_levels = [analysis['risk_level'] for analysis in credit_analysis.values()]
            risk_counts = {risk: risk_levels.count(risk) for risk in set(risk_levels)}
            
            overall_risk = max(risk_counts.keys(), key=lambda k: risk_counts[k]) if risk_counts else 'low'
            
            return {
                'overall_growth_rate': avg_growth_rate,
                'overall_acceleration': avg_acceleration,
                'pattern_counts': pattern_counts,
                'overall_risk': overall_risk,
                'indicators_analyzed': len(credit_analysis),
                'artificial_expansion_detected': avg_growth_rate > self.credit_expansion_threshold
            }
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro na agrega√ß√£o de cr√©dito: {e}")
            return self._create_fallback_credit_analysis()
    
    def _create_fallback_credit_analysis(self) -> Dict[str, Any]:
        """Cria an√°lise de cr√©dito de fallback"""
        return {
            'overall_growth_rate': 0.0,
            'overall_acceleration': 0.0,
            'pattern_counts': {},
            'overall_risk': 'unknown',
            'indicators_analyzed': 0,
            'artificial_expansion_detected': False,
            'error': 'Insufficient credit data'
        }
    
    def _create_fallback_production_analysis(self) -> Dict[str, Any]:
        """Cria an√°lise de produ√ß√£o de fallback"""
        return {
            'overall_severity': 'unknown',
            'distortion_indicators': 0,
            'recovery_estimate': 'unknown',
            'error': 'Insufficient production data'
        }
    
    def _create_fallback_investment_analysis(self) -> Dict[str, Any]:
        """Cria an√°lise de investimento de fallback"""
        return {
            'overall_score': 0.0,
            'malinvestment_detected': False,
            'correction_risk': 'unknown',
            'error': 'Insufficient investment data'
        }
    
    def _create_fallback_monetary_analysis(self) -> Dict[str, Any]:
        """Cria an√°lise monet√°ria de fallback"""
        return {
            'overall_aggressiveness': 'unknown',
            'intervention_frequency': 0,
            'distortion_level': 'unknown',
            'error': 'Insufficient monetary data'
        }
    
    # Implementa√ß√µes simplificadas para m√©todos restantes
    def _calculate_relative_distortions(self, series: pd.Series) -> float:
        """Calcula distor√ß√µes relativas"""
        try:
            if len(series) < 2:
                return 0.0
            return float(series.std() / series.mean()) if series.mean() != 0 else 0.0
        except Exception:
            return 0.0
    
    def _detect_sectoral_misalignments(self, series: pd.Series) -> List[str]:
        """Detecta desalinhamentos setoriais"""
        return []  # Implementa√ß√£o simplificada
    
    def _identify_misallocation_patterns(self, series: pd.Series) -> List[str]:
        """Identifica padr√µes de m√°-aloca√ß√£o"""
        return []  # Implementa√ß√£o simplificada
    
    def _assess_distortion_severity(self, distortions: float) -> str:
        """Avalia severidade das distor√ß√µes"""
        if distortions > 0.5:
            return 'high'
        elif distortions > 0.2:
            return 'medium'
        else:
            return 'low'
    
    def _estimate_recovery_time(self, distortions: float) -> str:
        """Estima tempo de recupera√ß√£o"""
        if distortions > 0.5:
            return 'long_term'
        elif distortions > 0.2:
            return 'medium_term'
        else:
            return 'short_term'
    
    def _aggregate_production_analysis(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Agrega an√°lise de produ√ß√£o"""
        return {
            'overall_severity': 'medium',
            'distortion_indicators': len(analysis),
            'recovery_estimate': 'medium_term'
        }
    
    def _calculate_investment_efficiency(self, series: pd.Series) -> float:
        """Calcula efici√™ncia do investimento"""
        return 0.5  # Implementa√ß√£o simplificada
    
    def _detect_investment_bubbles(self, series: pd.Series) -> List[str]:
        """Detecta bolhas de investimento"""
        return []  # Implementa√ß√£o simplificada
    
    def _identify_problematic_sectors(self, series: pd.Series) -> List[str]:
        """Identifica setores problem√°ticos"""
        return []  # Implementa√ß√£o simplificada
    
    def _calculate_malinvestment_score(self, efficiency: float, bubbles: List[str]) -> float:
        """Calcula score de m√°-aloca√ß√£o"""
        return 1.0 - efficiency  # Implementa√ß√£o simplificada
    
    def _assess_correction_risk(self, efficiency: float, bubbles: List[str]) -> str:
        """Avalia risco de corre√ß√£o"""
        if efficiency < 0.3 or len(bubbles) > 0:
            return 'high'
        elif efficiency < 0.6:
            return 'medium'
        else:
            return 'low'
    
    def _aggregate_malinvestment_analysis(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Agrega an√°lise de m√°-aloca√ß√£o"""
        return {
            'overall_score': 0.5,
            'malinvestment_detected': True,
            'correction_risk': 'medium'
        }
    
    def _identify_cycle_phases(self, series: pd.Series) -> List[str]:
        """Identifica fases do ciclo"""
        return ['expansion', 'contraction']  # Implementa√ß√£o simplificada
    
    def _detect_monetary_interventions(self, series: pd.Series) -> List[str]:
        """Detecta interven√ß√µes monet√°rias"""
        return []  # Implementa√ß√£o simplificada
    
    def _calculate_monetary_distortions(self, series: pd.Series) -> float:
        """Calcula distor√ß√µes monet√°rias"""
        return 0.3  # Implementa√ß√£o simplificada
    
    def _assess_policy_aggressiveness(self, interventions: List[str]) -> str:
        """Avalia agressividade da pol√≠tica"""
        return 'medium'  # Implementa√ß√£o simplificada
    
    def _assess_distortion_impact(self, distortions: float) -> str:
        """Avalia impacto das distor√ß√µes"""
        if distortions > 0.5:
            return 'high'
        elif distortions > 0.2:
            return 'medium'
        else:
            return 'low'
    
    def _aggregate_monetary_analysis(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """Agrega an√°lise monet√°ria"""
        return {
            'overall_aggressiveness': 'medium',
            'intervention_frequency': 0,
            'distortion_level': 'medium'
        }
