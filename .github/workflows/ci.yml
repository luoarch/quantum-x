# CI/CD Pipeline para Global Economic Regime Analysis & Brazil Spillover Prediction System
# Conforme especificação do DRS seção 10.2

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # === TESTES BACKEND ===
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Instalar dependências
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Executar linting
      run: |
        black --check app/
        isort --check-only app/
        mypy app/
    
    - name: Executar testes
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        DEBUG: True
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend

  # === TESTES FRONTEND ===
  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: dashboard/package-lock.json
    
    - name: Instalar dependências frontend
      working-directory: ./dashboard
      run: npm ci
    
    - name: Executar linting frontend
      working-directory: ./dashboard
      run: |
        npm run lint
        npm run type-check
    
    - name: Executar testes frontend
      working-directory: ./dashboard
      run: npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      working-directory: ./dashboard
      run: npm run build

  # === TESTES DE INTEGRAÇÃO ===
  test-integration:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Docker Compose
      run: |
        docker-compose -f docker-compose.yml up -d
        sleep 30  # Aguardar serviços iniciarem
    
    - name: Executar testes de integração
      run: |
        # TODO: Implementar testes de integração
        echo "Testes de integração serão implementados"
    
    - name: Parar serviços
      if: always()
      run: docker-compose -f docker-compose.yml down

  # === BUILD E PUSH IMAGENS ===
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build e push API
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/global-regime-analysis-api:latest
          ${{ secrets.DOCKER_USERNAME }}/global-regime-analysis-api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build e push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./dashboard
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/global-regime-analysis-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/global-regime-analysis-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # === DEPLOY ===
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy para produção
      run: |
        # TODO: Implementar deploy para produção
        echo "Deploy para produção será implementado"
