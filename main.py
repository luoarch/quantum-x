#!/usr/bin/env python3
"""
Sistema de An√°lise de Spillovers Econ√¥micos Brasil-Mundo
Fase 1: VAR + Neural Enhancement com Valida√ß√£o Cient√≠fica

Este script demonstra o funcionamento b√°sico do sistema.
"""

import sys
import os
import warnings
warnings.filterwarnings('ignore')

# Adicionar src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.data.data_loader import load_data
from src.models.hybrid_model import create_hybrid_model
from src.models.baseline_model import BaselineVARModel
from src.validation.scientific_validation import ScientificValidator
import pandas as pd
import numpy as np

def main():
    """Fun√ß√£o principal do sistema"""
    print("üöÄ Sistema de An√°lise de Spillovers Econ√¥micos Brasil-Mundo")
    print("=" * 60)
    print("Fase 1: VAR + Neural Enhancement com Valida√ß√£o Cient√≠fica")
    print("=" * 60)
    
    try:
        # 1. Carregar dados
        print("\nüìä 1. Carregando dados econ√¥micos...")
        data = load_data()
        print(f"‚úÖ Dados carregados: {len(data)} observa√ß√µes")
        print(f"   Per√≠odo: {data.index[0].date()} a {data.index[-1].date()}")
        
        # 2. Treinar modelo baseline
        print("\nüìä 2. Treinando modelo baseline VAR...")
        baseline_model = BaselineVARModel()
        baseline_model.fit(data)
        print("‚úÖ Modelo baseline treinado com sucesso!")
        
        # 3. Criar e treinar modelo h√≠brido
        print("\nüß† 3. Treinando modelo h√≠brido VAR + Neural Network...")
        model = create_hybrid_model(
            var_lags=12,
            nn_hidden_layers=(50, 25),
            simple_weight=0.4,
            complex_weight=0.6
        )
        
        model.fit(data)
        print("‚úÖ Modelo h√≠brido treinado com sucesso!")
        
        # 4. Valida√ß√£o cient√≠fica
        print("\nüî¨ 4. Executando valida√ß√£o cient√≠fica...")
        validator = ScientificValidator()
        validation_results = validator.comprehensive_validation(model, data, baseline_model)
        
        # 5. Gerar relat√≥rio de valida√ß√£o
        print("\nüìã 5. Gerando relat√≥rio de valida√ß√£o...")
        validation_report = validator.generate_validation_report(model, data)
        print(validation_report)
        
        # 6. Demonstra√ß√£o de predi√ß√µes
        print("\nüîÆ 6. Demonstra√ß√£o de predi√ß√µes...")
        demo_predictions(data, model)
        
        # 7. An√°lise de spillovers
        print("\nüìà 7. An√°lise de spillovers...")
        analyze_spillovers(data, model)
        
        print("\nüéâ Sistema executado com sucesso!")
        print("‚úÖ Fase 1 implementada e funcionando")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0

def demo_predictions(data: pd.DataFrame, model):
    """Demonstrar predi√ß√µes do modelo com contexto hist√≥rico"""
    print("   Demonstra√ß√£o de predi√ß√µes com incerteza:")
    
    # Usar √∫ltimos 12 per√≠odos como contexto hist√≥rico
    historical_context = data[['fed_rate', 'selic']].tail(12)
    
    for i in range(5):
        try:
            # Construir input com contexto hist√≥rico
            X_new = historical_context.iloc[-1:].values  # √öltima observa√ß√£o
            
            # Simular pr√≥ximo per√≠odo (para demo real√≠stica)
            np.random.seed(42 + i)  # Para reprodutibilidade
            fed_simulation = X_new[0,0] + np.random.normal(0, 0.1)
            selic_simulation = X_new[0,1] + np.random.normal(0, 0.2)
            X_future = np.array([[fed_simulation, selic_simulation]])
            
            # Fazer predi√ß√£o (converter array para DataFrame)
            X_future_df = pd.DataFrame(X_future, columns=['fed_rate', 'selic'])
            prediction = model.predict_with_uncertainty(X_future_df)
            
            # ACESSAR VALORES DIRETAMENTE (n√£o indexar arrays)
            spillover_val = prediction['prediction']
            uncertainty_val = prediction['uncertainty']
            is_outlier_val = prediction['is_outlier']
            high_uncertainty_val = prediction['high_uncertainty']
            
            # Calcular data futura para demonstra√ß√£o
            future_month = 10 + i
            future_year = 2025 if future_month <= 12 else 2026
            future_month = future_month if future_month <= 12 else future_month - 12
            
            print(f"   Per√≠odo {i+1} ({future_year}-{future_month:02d}):")
            print(f"     Fed Rate: {fed_simulation:.2f}%")
            print(f"     Selic: {selic_simulation:.2f}%")
            print(f"     Predi√ß√£o Spillover: {spillover_val:.4f}")
            print(f"     Incerteza: {uncertainty_val:.4f}")
            print(f"     √â Outlier: {'Sim' if is_outlier_val else 'N√£o'}")
            print(f"     Alta Incerteza: {'Sim' if high_uncertainty_val else 'N√£o'}")
            print()
            
        except Exception as e:
            print(f"‚ùå Erro no per√≠odo {i+1}: {e}")
            import traceback
            traceback.print_exc()
            break

def analyze_spillovers(data: pd.DataFrame, model):
    """Analisar padr√µes de spillovers"""
    print("   An√°lise de padr√µes de spillovers:")
    
    # Calcular spillovers hist√≥ricos
    if 'spillover' in data.columns:
        spillover_mean = data['spillover'].mean()
        spillover_std = data['spillover'].std()
        spillover_corr = data['fed_rate'].corr(data['selic'])
        
        print(f"   Spillover m√©dio hist√≥rico: {spillover_mean:.4f}")
        print(f"   Desvio padr√£o: {spillover_std:.4f}")
        print(f"   Correla√ß√£o Fed-Selic: {spillover_corr:.3f}")
        
        # An√°lise por per√≠odos
        recent_data = data.tail(24)  # √öltimos 2 anos
        recent_spillover = recent_data['spillover'].mean()
        print(f"   Spillover recente (24 meses): {recent_spillover:.4f}")
        
        # Detectar per√≠odos de alta volatilidade
        high_vol_periods = data[abs(data['spillover']) > spillover_std * 2]
        if len(high_vol_periods) > 0:
            print(f"   Per√≠odos de alta volatilidade: {len(high_vol_periods)}")
            print(f"   √öltimo per√≠odo de alta volatilidade: {high_vol_periods.index[-1].strftime('%Y-%m')}")

def print_system_info():
    """Imprimir informa√ß√µes do sistema"""
    print("\nüìã Informa√ß√µes do Sistema:")
    print(f"   Python: {sys.version}")
    print(f"   Pandas: {pd.__version__}")
    print(f"   NumPy: {np.__version__}")
    print(f"   Diret√≥rio: {os.getcwd()}")

if __name__ == "__main__":
    print_system_info()
    exit_code = main()
    sys.exit(exit_code)
